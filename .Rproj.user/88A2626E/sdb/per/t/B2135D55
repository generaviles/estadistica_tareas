{
    "collab_server" : "",
    "contents" : "#Taller R\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n## ¿Cómo instalar las herramientas?\n###Instalando R\nLas herramientas que utilizaremos será la última versión liberada del software (al momento de hacer éste taller la versión actual es R 3.3.3):\n\n  - [Para usuarios Windows.](https://cran.r-project.org/bin/windows/base/)\n  - [Para usuarios MacOS](https://cran.r-project.org/bin/macosx/)\n  - Para usuarios Linux:\n    - [Debiant](https://cran.r-project.org/bin/linux/debian/)\n    - [Suse](https://cran.r-project.org/bin/linux/suse/)\n    - [Ubuntu](https://cran.r-project.org/bin/linux/ubuntu/)\n\n###Instalando RStudio (**I**ntegrated **D**evelopment **E**nvironment para R)\n\nEl utilizar un IDE simplifica considerablemente el trabajo a realizar con R.<br \\>\n\nInstalaciones para:\n\n  - [Windows](https://download1.rstudio.org/RStudio-1.0.136.exe)\n  - [MacOS_X](https://download1.rstudio.org/RStudio-1.0.136.dmg)\n  - [Ubuntu_32Bit](https://download1.rstudio.org/rstudio-1.0.136-i386.deb)\n  - [Ubuntu_64Bit](https://download1.rstudio.org/rstudio-1.0.136-amd64.deb)\n  - [Fedora 19+/Redhat7+_32Bit](https://download1.rstudio.org/rstudio-1.0.136-i686.rpm)\n  - [Fedora 19+/Redhat7+_64Bit](https://download1.rstudio.org/rstudio-1.0.136-x86_64.rpm)\n\n\n## ¿Qué es R?\n###Historia\n  - R fué desarrollado a partir de **S**, un lenguaje desarrollado en *Bell Labs* por John Chambers y colaboradores.\n    - **S** inicialmente se corría con librerías de [Fortran](https://en.wikipedia.org/wiki/Fortran).\n    - En 1988 S fué reescrito en **C**, un lenguaje que también fué desarrollado en *Bell Labs*.\n    - En el libro [Statistical Models in S](https://www.amazon.com/Statistical-Models-J-M-Chambers/dp/0412053012/ref=sr_1_1?s=books&ie=UTF8&qid=1489359240&sr=1-1&keywords=Statistical+models+in+S) (conocido como el *white book*) se documentan la funcionalidad para análsis estadísticos a éste nivel de desarrollo de **S**.\n    - La versión 4 de **S** se liberó en 1998 y se parece mucho a los softwares actuales derivados de **S**: [R](https://www.r-project.org) y [S-PLUS](http://www.solutionmetrics.com.au/products/splus/default.html). El libro [Programing with Data](https://www.amazon.com/Programming-Data-Language-Lecture-Economics/dp/0387985034) (conocido como el *green book*) por John Chambers documenta ésta versión del lenguaje.\n  - La filosofía de S:\n    - \"Queríamos que los usuarios pudieran empezar en un ambiente interactivo, donde ellos no se pensaran, de forma conciente, como programadores. Posteriormente, mientras sus necesidades se hacían más claras y su sofisticación aumentara, podrían \"deslizarse\" hacia la programación, cuando el lenguaje y el sistema como realizara los procesos se volvieran más importantes para ellos.\" [@historyS]\n  - **R** fué desarrollado a partir de S en Nueva Zelanda por Ross Ihaka y Robert Gentleman. Su experiencia en el proceso está documentada en un [paper](https://www.stat.auckland.ac.nz/~ihaka/downloads/R-paper.pdf) publcado por la Universidad de Auckland, NZ.\n  - En 1993 se libera por primera vez al público.\n  - En 1997 se forma el **R Core Group** con gente asociada a *S-PLUS*. Éste grupo controla el código fuente de R.\n  - En 2000 se libera *R version 1.0.0*\n  - El 7 de Marzo de 2017 se libera *R version 3.3.3*\n\n###Generalidades\n\n  - La [sintaxis](http://librosweb.es/libro/javascript/capitulo_1/sintaxis.html) de R es muy similar a S mas no su [semántica](https://geekytheory.com/semantica-coder).\n  - El software es ligero, la funcionalidad del mismo está dada en un formato modular, a través de paquetes.\n  - Las capacidades **gráficas** son sofisticadas y mejores que la mayoría de los paquetes estadísticos.\n  - Funciona para realizar actividades de interacción pero también contiene un poderoso lenguaje de programación para el desarrollo de nuevas herramientas (usuario->programador).\n  - La comunidad R es muy activa y dinámica.\n    \n##¿Cómo obtener ayuda?\n\nComo se ha comentado en las secciones anteriores, la comunidad R es muy activa, uno de los lugares donde usualmente se obtienen buenas orientaciones es en [Stack Overflow](https://stackoverflow.com/questions/tagged/r).\nOtro lugar donde se pueden obtener información sobre una función o paquete en específico es en la documentación del paquete que se instala al descargar el mismo. En el siguiente ejemplo se puede ver cómo se explora el comando `plot` de los paquetes base de R:\n\n> `?plot`\n\nUna vez que entiendo cómo trabaja la función `plot` entonces puedo probar con datos y ver qué obtengo. Ésta es una manera frecuente de resolver dudas o problemas de código.\n\n```{r}\nplot(cars)\n```\n\nOtro buen lugar para obtener información son las [***cheat sheets***](https://www.rstudio.com/resources/cheatsheets/), publicadas por RStudio en su mayoría.\n\nUn recurso muy utilizado es la búsqueda en [Google](www.google.com).\n\nLos cursos en línea han tenido un significativo auge en los últimos años, comparto algunos que considero valen la pena, ésta lista no es exhaustiva:\n\n  - [DataCamp](https://www.datacamp.com)\n  - [DataQuest](https://www.dataquest.io)\n  - [Udacity](https://www.udacity.com/course/data-analysis-with-r--ud651)\n  - [Udemy](https://www.udemy.com/introduction-to-r/)\n  - MOOCs:\n    - [Coursera](https://www.coursera.org/specializations/jhu-data-science)\n    - [Edx](https://www.edx.org/xseries/data-analysis-life-sciences)\n\n##Entrada de datos y su evaluación en la consola\n\nUna vez que abrimos la consola R podemos empezar a escribir en el *R prompt*, los caracteres que se ingresan al *R prompt* se le llaman **expresiones**, hay algunas reglas básicas para entrar expresiones:\n\n  - **<-** es el símbolo que se utiliza como operador de asignación, también es posible utilizar **=**.\n  - **#**: R interpreta todo lo que esté a la derecha de éste símbolo como un comentario y no lo toma en cuenta para cálculos.\n\nEjemplos:\n\n```{r, echo=TRUE, warning=TRUE, tidy=TRUE}\nx <- 1  #No se imprime nada, solo se creó un nuevo objeto con un valor numérico.\n\nprint(x) #impresión explícita\n\nmsg <- \"hello\" #No se imprime nada, se creó el objeto `msg` con valores `string` o `character`\n\nmsg  #auto-impresión\n\nx  #auto-imrpesión\n```\n\n##Estructuras de datos en R\n\n###Clases básicas de objetos\n\nR tiene 5 clases básicas o *atómicas* de objetos:\n\n  - *Character*\n    - Valores cualitativos con escalas nominales u ordinales.\n  - *Numeric* (números reales)\n    - Números con valores cuantitativos con escalas continuas.\n    - Entre un valor y otro hay infinito de otros valores.\n  - *Integer*\n    - Números completos, sin fracciones, pueden ser positivos o negativos.\n    - Conocidos como valores cuantitativos con escalas discretas.\n    - Equidistancia entre un valor y otro.\n  - *Complex*\n  - *Logical* (booleans/binarios/falso-verdadero)\n    - Valores con solo dos opciones posibles, ambas mutuamente exclusivas y opuestas.\n\nEl objeto **más básico** es el ***vector***:\n\n  - Un vector **solo** puede contener objetos de la misma clase.\n  - La **lista** permite contener objetos de distintos tipos como un vector.\n\n###Atributos\n\nSe puede accceder a los atributos de un objeto en R a través de la función `attributes()`. La información que R entregue será la siguiente:\n\n  - `names`/`dimnames`\n    - Nombres y/o nombres de dimensiones.\n  - `dimensions`\n    - En el caso de matrices y arreglos.\n  - `class`\n    - Clase del objeto.\n  - `length`\n    - Longitud del objeto.\n  - Otros atributos y metadata definidos por el usuario.\n\n##Utilizando R y RStudio\n\n*En esta sección nos apoyamos con las ilustraciones de Carlos Pérez González y Marcos Colabrook Santamaría [@rstudiocurso]*\n\n###Componentes RStudio\n\nLo primero que haremos es abrir RStudio y explorar los componentes básicos:\n\n\n![](D:/Dropbox/MsC UABC/2o Semestre/Clases/Estadistica/estadistica-syllabus/img/rstudio.png)\n\n###Iniciando un proyecto\n\n####Paso 1\n\nEn la esquina superior derecha, identifica el ícono de projecto y da click en él.\n\n![](D:/Dropbox/MsC UABC/2o Semestre/Clases/Estadistica/estadistica-syllabus/img/rstudioproject.png)\n\n####Paso 2\n\nPuedes elegir crear el proyecto en un directorio que ya exista o crear un directorio nuevo para iniciar. Aún puedes conectar tu projecto a algún administrador de versiones ([Git](https://git-scm.com)/[GitHub](https://github.com)).\n\n![](D:/Dropbox/MsC UABC/2o Semestre/Clases/Estadistica/estadistica-syllabus/img/rstudioproject1.png)\n\n####Paso 3\n\nPor ahora la opción *empty project* es la que utilizaremos.\n\n![](D:/Dropbox/MsC UABC/2o Semestre/Clases/Estadistica/estadistica-syllabus/img/rstudioproject2.png)\n\n####Paso 4\n\nSelecciona el nombre del directorio así como el folder donde se creará en tu ordenador.\n\n![](D:/Dropbox/MsC UABC/2o Semestre/Clases/Estadistica/estadistica-syllabus/img/rstudioproject3.png)\n\n####Paso 5\n\nAl completar los pasos, tu sesión de RStudio debería verse como se muestra en la imagen.\n\n![](D:/Dropbox/MsC UABC/2o Semestre/Clases/Estadistica/estadistica-syllabus/img/rstudioproject4.png)\n\n###Cargando los datos\n\nHay muchas maneras de cargar datos a R, se puede hacer con líneas de código desde la consola, a través de paquetes preinstalados que ayudan a leer datos en formatos específicos o através de los íconos de RStudio. La siguiente imagen muestra cómo realizar el proceso a través de RStudio:\n\n<center>![](D:/Dropbox/MsC UABC/2o Semestre/Clases/Estadistica/estadistica-syllabus/img/rstudioimport.png)</center>\n\nPara éste ejercicio utilizaremos una base de datos que se puede obtener [aquí](https://raw.githubusercontent.com/generaviles/estadistica-syllabus/master/datasets/example.csv) provista amablemente por la compañera Pamela.\n\nSi realizamos el ejercicio desde RStuio se producirá el siguiente código con el siguiente resultado.\n\n*Toma en cuenta que la dirección cambiará dependiendo dónde haz guardado el archivo.*\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE}\nlibrary(readr)\nexample <- read_csv(\"D:/Dropbox/MsC UABC/2o Semestre/Clases/Estadistica/estadistica-syllabus/datasets/example.csv\")\n\nhead(example)\n```\n\n###Preparando la base de datos\n\nDe entrada vemos que la base de datos podría \"limpiarse\" si se eliminaran las filas 1 y 2 así como la columna 1 ya que no aportan información relevante.\n\n```{r}\nexample <- example[-1:-2,-1] #Estamos creando un subconjunto de `dataset` que se compone de todos los elementos de la base de datos menos las filas 1 y 2 así como la columna 1.\n\ncolnames(example)[1]<-\"Año\" #Arregla el problema de caracter en la variable \"Año\"\n\nhead(example)\n```\n\nCon respecto a **datos faltantes** podemos ver que en la última fila, correspondiente al año 2015, los valores correspondientes al mes de Noviembre y Diciembre están faltantes. Para solucionar éste debemos implementar algún método de **imputación de datos** para calcular los valores faltantes. El proceso a seguir depende de cada área del conocimiento.\n\n###Visualización de datos para análisis exploratorios\n\n####Buscando tipo de distribución en los datos\n\nPara poder evaluar de una manera más cómoda y rápida, vamos a generar histogramas de la distribución de los datos contenidos en todas las variables (columnas) de nuestra base de datos, en éste caso necesitariemos hacer 12 histogramas y compararlos juntos.\n\nUtilizaremos el paquete `lattice` para ésta tarea en específico.\n\n  - Los paquetes se instalan con la funcion `install.packages()` dentro de los parentesis se pone el nombre del paquete **entre** comillas.\n  - Una vez instalado el paquete se debe llamar a la consola con la función `library()` y el nombre del paquete dentro de los paréntesis **sin** comillas.\n\n```{r, echo=TRUE, fig.align = 'center'}\n#install.packages(\"lattice\")\nlibrary(lattice)\n\nhistogram( ~ ENERO +FEBRERO +MARZO +ABRIL +MAYO +JUNIO +JULIO +AGOSTO +SEPTIEMBRE +OCTUBRE +NOVIEMBRE +DICIEMBRE, data = example, main = 'Histogramas para Evaluación Inicial de Distribución de los Datos')\n\n```\n\nÉsta información se puede obtener también con la función `summary()`:\n\n```{r, echo=TRUE}\nsummary(example)\n```\n\nDe los resultados generados por `summary()` se pueden obtener la siguiente información de cada variable:\n\n  - Media\n  - Mediana\n  - Rango Intercuartil\n  - Valor mínimo\n  - Valor máximo\n\n####Medidas de tendencia central\n\nSeleccionaremos los meses de **Abril** y **Agosto** para calcular medidas de tendencia central, de los histogramas previos podemos intuir que uno de éstos meses tiene un \"comportamiento normal\" y el otro no. Para éste ejercicio utilizarmos el generador de gráficas que viene con los paquetes báiscos cuando se instala R.\n\n#####Distribuciones no Normales\n\n**Gráfica Base**\n\n```{r, fig.align='center'}\nhist(example$ABRIL, #Histograma base\n     col = \"darksalmon\", #color del relleno de las barras\n     border = \"black\", #color del borde de las barras\n     prob = TRUE, #le indica a R que los histogramas se realizaran en base a densidad y no a cantidad.\n     xlab = \"Milímetros de Agua\",\n     ylab = \"Frecuencia\",\n     main = \"Precipitación durante el mes de Abril de los años 1965 a 2015\")\n\n\n```\n\n> Para una lista de los colores que puedes utilizar con las gráficas base de R puedes consultar [aquí](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf). \n\n**Medidas de Tendencia Central**\n\nUna vez que la gráfica base está desarrollada, procederemos a agregar la curva de distribución, las líneas de media y mediana.\n\n```{r, eval=FALSE, fig.align='center', include=TRUE}\n\nhist(example$ABRIL, #Histograma base\n     col = \"darksalmon\", #color del relleno de las barras\n     border = \"black\", #color del borde de las barras\n     prob = TRUE, #le indica a R que los histogramas se realizaran en base a densidad y no a cantidad.\n     xlab = \"Milímetros de Agua\",\n     ylab = \"Frecuencia\",\n     main = \"Precipitación durante el mes de Abril de los años 1965 a 2015\")\n\n##Distribución##\nlines(density(example$ABRIL), #Línea base de distribución\n      lwd = 3, #ancho de la linea\n      col = \"deeppink\" #color of line\n      )\n\n##Media##\nabline(v = mean(example$ABRIL), #Línea base\n       lwd = 2, #Ancho de línea\n       col = \"blue\" #Color de línea\n       )\n\n##Mediana##\n\nabline(v = median(example$ABRIL), ##Línea básica\n       lwd = 2,\n       col = \"chartreuse\")\n```\n\n**Leyenda**\n\n```{r, eval=TRUE, fig.align='center', include=TRUE}\n\nhist(example$ABRIL, #Histograma base\n     col = \"darksalmon\", #color del relleno de las barras\n     border = \"black\", #color del borde de las barras\n     prob = TRUE, #le indica a R que los histogramas se realizaran en base a densidad y no a cantidad.\n     xlab = \"Milímetros de Agua\",\n     ylab = \"Frecuencia\",\n     main = \"Precipitación durante el mes de Abril de los años 1965 a 2015\")\n\n##Distribución##\nlines(density(example$ABRIL), #Línea base de distribución\n      lwd = 3, #ancho de la linea\n      col = \"deeppink\" #color of line\n      )\n\n##Media##\nabline(v = mean(example$ABRIL), #Línea base\n       lwd = 2, #Ancho de línea\n       col = \"blue\" #Color de línea\n       )\n\n##Mediana##\n\nabline(v = median(example$ABRIL), ##Línea básica\n       lwd = 2,\n       col = \"chartreuse\")\n\n##Leyenda\n\nlegend(x = \"topright\", #Dónde se va a ubicar la leyenda con relación a la gráfica\n       c(\"Gráfica de Densidad\", \"Media\", \"Mediana\"),\n       lwd = c(3,2,2),\n       col = c(\"deeppink\", \"blue\", \"chartreuse\"))\n```\n\n####Distribuciones Normales\n\n**AGOSTO**\n\nRealiza el mismo proceso para obtener una gráfica del mes de `AGOSTO` como la que se presenta abajo:\n```{r, echo=FALSE, fig.align='center'}\nhist(example$AGOSTO, #Histograma base\n     col = \"darksalmon\", #color del relleno de las barras\n     border = \"black\", #color del borde de las barras\n     prob = TRUE, #le indica a R que los histogramas se realizaran en base a densidad y no a cantidad.\n     xlab = \"Milímetros de Agua\",\n     ylab = \"Frecuencia\",\n     main = \"Precipitación durante el mes de Abril de los años 1965 a 2015\")\n\n##Distribución##\nlines(density(example$AGOSTO), #Línea base de distribución\n      lwd = 3, #ancho de la linea\n      col = \"deeppink\" #color of line\n      )\n\n##Media##\nabline(v = mean(example$AGOSTO), #Línea base\n       lwd = 2, #Ancho de línea\n       col = \"blue\" #Color de línea\n       )\n\n##Mediana##\n\nabline(v = median(example$AGOSTO), ##Línea básica\n       lwd = 2,\n       col = \"chartreuse\")\n\n##Leyenda\n\nlegend(x = \"topright\", #Dónde se va a ubicar la leyenda con relación a la gráfica\n       c(\"Gráfica de Densidad\", \"Media\", \"Mediana\"),\n       lwd = c(3,2,2),\n       col = c(\"deeppink\", \"blue\", \"chartreuse\"))\n\n```\n\n##¿Cómo compartir datos y análisis con estadísticos o científicos de datos?\n\nUna breve guía de cómo compartir datos con personas que se dedican a la estadística o ciencia de datos [@jeffleek], Jeff Leek dice que los datos compartidos deben venir ordenados en cuatro grandes grupos/folders/repositorios:\n\n  1. Datos crudos.\n    - Datos que no han sido manipulados por ningún software de minería de datos o algún otro.\n  1. Una base de datos \"arreglada\" (*tidy dataset*).\n    - Cada fila una instancia/paciente/ente a medir.\n    - Cada columna una variable.\n    - Cada celda un valor de la variable correspondiente.\n  1. Un libro de códigos que explique cada variable y sus valores en en la base de datos \"arreglada\".\n  1. Una receta explícita y exacta de lo que se hizo para ir de 1 --> 2,3, étc\n",
    "created" : 1489516369363.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3308336650",
    "id" : "B2135D55",
    "lastKnownWriteTime" : 1489516388,
    "last_content_update" : 1489516388837,
    "path" : "D:/Dropbox/MsC UABC/2o Semestre/Clases/Estadistica/estadistica-syllabus/06-cursoR.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}